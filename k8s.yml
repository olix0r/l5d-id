# Note, this should be consumed via `make k8s`, which provides necessary crypto
# resources.

# This deployment simulates a meshed application
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: sync
  labels:
    demo: l5d-id
    l5d-role: app
spec:
  replicas: 1
  template:
    metadata:
      labels:
        demo: l5d-id
        l5d-role: app
    spec:
      initContainers:
      - name: l5d-id-sync-init
        image: olix0r/l5d-id:v3
        command:
          - "/l5d-id-sync-init"
          - "-token=/var/run/secrets/kubernetes.io/serviceaccount/token"
          - "-key=/var/run/linkerd/identity/key"
          - "-csr=/var/run/linkerd/identity/csr"
        volumeMounts:
        - mountPath: /var/run/linkerd/identity
          name: l5d-id-service-key
        - mountPath: /var/run/linkerd/trust
          name: l5d-id-trust

      containers:
      - name: l5d-id-sync
        image: olix0r/l5d-id:v3
        command:
          - "/l5d-id-sync"
          - "-token=/var/run/linkerd/serviceaccount/token"
          - "-csr=/var/run/linkerd/identity/csr"
          - "-crt=/var/run/linkerd/identity/crt"
          - "-trust=/var/run/linkerd/trust/trust.crt"
          - "-addr=api.l5d-id-svc:8083"
        volumeMounts:
        - mountPath: /var/run/linkerd/identity
          name: l5d-id-service-key
        - mountPath: /var/run/linkerd/trust
          name: l5d-id-trust
        - name: l5d-id-service-account
          mountPath: "/var/run/linkerd/serviceaccount"
          readOnly: true

      volumes:
      - name: l5d-id-service-account
        projected:
          sources:
          - serviceAccountToken:
              audience: l5d-id
              expirationSeconds: 3600
              path: token

      - name: l5d-id-service-key
        emptyDir:
          medium: Memory

      # Must be provided by `make target/example.com/l5d-id-trust.yml`
      - name: l5d-id-trust
        secret:
          secretName: l5d-id-trust


---
apiVersion: v1
kind: Namespace
metadata:
  name: l5d-id
  labels:
    demo: l5d-id
    l5d-role: controller

---
apiVersion: v1
kind: Service
metadata:
  name: l5d-id-svc
  namespace: l5d-id
  labels:
    demo: l5d-id
    l5d-role: controller
spec:
  type: LoadBalancer
  selector:
    demo: l5d-id
    l5d-role: controller
  ports:
  - name: grpc
    port: 8083

---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: l5d-id-svc
  namespace: l5d-id
  labels:
    demo: l5d-id
    l5d-role: controller
spec:
  replicas: 1
  template:
    metadata:
      labels:
        demo: l5d-id
        l5d-role: controller
    spec:

      initContainers:
      - name: l5d-id-sync-init
        image: olix0r/l5d-id:v3
        command:
        - "/l5d-id-sync-init"
        - "-token=/var/run/secrets/kubernetes.io/serviceaccount/token"
        - "-key=/var/run/linkerd/identity/key"
        - "-csr=/var/run/linkerd/identity/csr"
        volumeMounts:
        - mountPath: /var/run/linkerd/identity
          name: l5d-id-service-key

      containers:
      - name: l5d-id-sync
        image: olix0r/l5d-id:v3
        command:
        - "/l5d-id-sync"
        - "-token=/var/run/secrets/kubernetes.io/serviceaccount/token"
        - "-csr=/var/run/linkerd/identity/csr"
        - "-crt=/var/run/linkerd/identity/crt"
        - "-addr=localhost:8083"
        volumeMounts:
        - mountPath: /var/run/linkerd/identity
          name: l5d-id-service-key

      - name: l5d-id-svc
        image: olix0r/l5d-id:v3
        command:
        - "/l5d-id-svc"
        - "-lifetime=1m"
        - "-signing-key=/var/run/linkerd/ca/key"
        - "-signing-crt=/var/run/linkerd/ca/crt"
        volumeMounts:
        - mountPath: /var/run/linkerd/ca
          name: l5d-id-signing-key

      volumes:
      # This is generated by `make target/example.com/l5d-id-signing-key.yml`
      - name: l5d-id-signing-key
        secret:
          secretName: l5d-id-signing-key

      # Used to store key material from `l5d-id-sync-init` to `l5d-id-sync`
      - name: l5d-id-service-key
        emptyDir:
          medium: Memory
